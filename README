ScaffoldingExtensions
=====================

The Scaffolding Extensions plugin enhances Rails' default scaffolding in the
following ways:

  * Choose which fields are displayed in the scaffold and in which order
  * Choose which methods are added by the scaffold function
  * Handle belongs_to associations with select boxes or auto completing text
    boxes in the new/edit forms
  * Add HABTM association scaffolding using a select box for removing existing
    associations and a select box or an auto completing text box for adding a
    new association.
  * Add links to associated objects on the edit page for the model, allowing
    fast access to manage associated models, edit the HABTM asociations, or add
    objects for has_many associations.
  * Add simple search scaffolding (using all fields from new/edit form)
  * Add scaffolding for merging records (combining two records into one by
    updating all associated tables)
  * Show associated data instead of foreign key integer in show/search results 
    scaffold
  * Many customization options for all parts of scaffolding

Quick Start
===========

In an existing Rails application, create a controller
(i.e. "script/generate controller crud"), and modify so it looks like:

  class CrudController < ApplicationController
    scaffold_all_models
  end

Then go to the index page for the controller (e.g. http://website/crud).  
You'll see a link to a management page for each of your models.  Each
management page has links to create, delete, edit, show, search, and merge
pages for the model. The pages should be usable right away, but you'll want to
add some configuration code to your models to specify the default names to
display in select boxes, attributes to show on the forms, associations to show,
whether to use select boxes or autocompleting text boxes, etc..

Customization
=============

An addition to the new scaffold features that this plugin adds (merge, search,
belongs_to, and habtm scaffolding), the major attraction of this plugin is the
ability to customize the scaffolding by adding some code to the model class.
Let's start with the most common customizations:

  class Album < ActiveRecord::Base
    has_and_belongs_to_many :artists
    belongs_to :genre
    @scaffold_fields = %w'name rating genre'
    @scaffold_select_order = 'name'
    @scaffold_auto_complete_options = {}
    def scaffold_name
      name[0...50]
    end
  end

@scaffold_fields determines which fields are shown in the new, edit, and search
forms (which use the order specified).  It defaults to content_columns plus
belongs_to associations. @scaffold_select_order determines which order is used
in the SQL ORDER clause when displaying a list of albums (for example, from the
edit link of the management page).  @scaffold_auto_complete_options turns on
autocompleting for the model, instead of using select boxes (necessary for a
decent response time if you have a large number of records).   scaffold_name
determines the name to use for each album inside those select boxes.  Note that
it is a method and not a variable, so you need to specify a ruby instance
method for it.

Notice in this case that genre was specified.  In this case, our schema has 
genre_id as a foreign key to the genres table.  If you specified genre_id,
you'd get a usual text input box for the foreign key integer.  If you specify
genre (the name of the belongs_to association), instead of a text input box,
you will get a select box with all genres, allowing you to pick one.  It will
use the @scaffold_select_order variable and scaffold_name method in the genre 
model to format the select box.  If you have @scaffold_auto_complete_options
set in the Genre model, there will be an autocompleting text box instead of a
select box (though since there aren't that many genres, you would probably be
better off with a select box in this case).

There are also a couple of customizations that can be set in the controller:

  * @scaffold_template_dir => Allows you to choose a separate directory for the
    scaffolds (instead of the one that comes with this plugin)
  * @default_scaffold_methods => Allows you to change the methods scaffolded by
    default, instead of using :except or :only each time.

There are some other lessor used options which allow you to:

  * Set the css class of scaffolded tables per ActiveRecord class
  * Override the input widget type and widget options per attribute
  * Choose which associations to display on the edit screen of a model
  * Choose which associations to eagerly load when displaying select boxes for
    the model

Consult the RDoc if you would like more information on these (and other
options).

General Usage
=============

In many cases, if you are just using the plugin to create an easy
administrative front end to your existing application, it will probably be
easier to use scaffold_all_models instead of following the instructions below,
as that takes care of things for you.  The instructions below predate the
introduction of scaffold_all_models, and show how different options passed to
the scaffold method affect the creation of the scaffolding.  They will mainly
be useful if you are using the scaffolding for non administrative forms.

Generally, the scaffolding extensions are used in same way as the normal
scaffolding.  Inside a controller, add:

  scaffold :album
  
In addition to the normal options, this plugin adds the following options to
the scaffold method:

  * :except => don't generate methods for certain actions
  * :only => only generate methods for given actions
  * :habtm => generate a has_and_belongs_to_many scaffold for the given classes

So these is are valid calls to scaffold:

  scaffold :album, :suffix=>true, :except=>:delete, :habtm=>[:artist]
  scaffold :artist, :only=>[:new, :edit, :search, :manage], :habtm=>:artist

Let's say you just do the simplest possible command (scaffold :album).  Then
you go to the index of the controller.  You'll notice some differences.  The
default Rails scaffold page has a paginated table of records.  This plugin
changes that to a simple management page with the following links:

  * Create album
  * Destroy album
  * Edit album
  * Merge albums
  * Search albums
  * Show album

Clicking on show, destroy, or edit links will bring up a simple select box
allowing you to choose a record to show, destroy, or edit.  Clicking on new
will bring you to a form that allows you to create a new object (similar to the
default form, with slightly different formatting).  Clicking on search will
bring up a simple search form for searching on any of the fields in the new or
edit form (the search results page looks similar to the default Rails index
page).  Clicking on merge will bring up a page with two select boxes, allowing
you to merge two records of the same type (by updating the necessary
associations and then deleting the record to be merged).

If you specified any actions in :except (or didn't include them in :only),
the appropriate links won't appear in the management page.  If you specified
:manage in :except, the management page won't be created.  The scaffold methods
that are available for use in :except and :only are:

  [:manage, :show, :destroy, :edit, :new, :search, :merge]
  
Let's say you used the command:

  scaffold :artist, :only=>[:new, :edit, :search, :manage], :habtm=>:artist

The manage page would look like:

  * Create album
  * Edit album
  * Search albums

If you click on the edit albums link and select an album, you'll notice that
below the entry form for updating the album are all of the items associated
with the current item (unless you overrode it using the
@scaffolded_associations variable in the model).  Assuming you use 
:suffix=>true when creating scaffolds and create scaffolds for multiple models
in the same controller, the associated items will be linked so that they can be
easily edited.

If you just want to create habtm scaffolds, there is a command that does so:

  scaffold_habtm(:artist, :album)

By default, this will create the habtm scaffold both ways. You can go to
edit_album_artists/42 to edit the artists for album 42 and
edit_artist_albums/42 to edit the albums for artist 42.

Questions?
==========

Feel free to contact me at jeremyevans0@gmail.com if you have any questions
about this plugin.
